{"version":3,"sources":["../../../src/api/controller/invoice.controller.js"],"names":["findAll","req","res","next","Invoice","find","then","json","invoices","catch","status","error","findOne","_id","params","schema","joi","object","keys","string","required","validate","value","details","invoice","message","createInvoice","body","item","qty","date","due","tax","rate","number","integer","optional","create","err"],"mappings":"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","file":"invoice.controller.js","sourcesContent":["import joi from 'joi';\nimport Invoice from '../models/invoice.model'\n\nexport default {\n    findAll(req, res, next) {\n        Invoice.find()\n            .then(invoices => res.json(invoices))\n            .catch(error => {\n                res.status = 500;\n                res.json(error)\n            })\n    },\n    findOne(req, res, next) {\n        let { _id } = req.params;\n        const schema = joi.object.keys({\n            _id: joi.string().required()\n        });\n        let { error, value } = joi.validate(req.params, schema);\n        if (error && error.details) {\n            return res.status(400).json(error);\n        }\n        Invoice.findOne({ _id })\n            .then(invoice => {\n                if (invoice) {\n                    res.json(invoice);\n                } else {\n                    res.status(404).json({\n                        error: {\n                            message: 'No Invoice Found!'\n                        }\n                    })\n                }\n            })\n            .catch(error => {\n                res.status(500).json(error);\n            })\n\n    },\n    createInvoice(req, res, next) {\n        let { item, qty, date, due, tax, rate } = req.body;\n        const schema = joi.object().keys({\n            item: joi.string().required(),\n            date: joi.date().required(),\n            due: joi.date().required(),\n            qty: joi.number().integer().required(),\n            tax: joi.number().optional(),\n            rate: joi.number().optional()\n        });\n        const { error, value } = joi.validate(req.body, schema);\n        if (error && error.details) {\n            return res.status(400).json(error);\n        }\n        Invoice.create(value)\n            .then(invoice => {\n                res.json(invoice);\n            })\n            .catch(err => {\n                res.status(500).json(err);\n            })\n    }\n}"]}