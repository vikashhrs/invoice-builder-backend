{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","app","PORT","accessLogStream","fs","createWriteStream","path","join","__dirname","flags","use","stream","bodyParser","json","express","urlencoded","router","req","res","next","error","Error","message","status","listen","console","log"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEAA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACAD,mBAASG,OAAT,CAAiB,0CAAjB;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,OAAO,IAAb;;AAEA,IAAMC,kBAAkBC,aAAGC,iBAAH,CAAqBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,YAArB,CAArB,EAAyD,EAAEC,OAAO,GAAT,EAAzD,CAAxB;;AAEAR,IAAIS,GAAJ,CAAQ,sBAAO,UAAP,EAAmB,EAAEC,QAAQR,eAAV,EAAnB,CAAR;;AAEAF,IAAIS,GAAJ,CAAQE,qBAAWC,IAAX,EAAR;AACAZ,IAAIS,GAAJ,CAAQI,kBAAQC,UAAR,EAAR;AACAd,IAAIS,GAAJ,CAAQ,MAAR,EAAgBM,cAAhB;AACAf,IAAIS,GAAJ,CAAQ,UAACO,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAMC,QAAQ,IAAIC,KAAJ,CAAU,YAAV,CAAd;AACAD,UAAME,OAAN,GAAgB,gBAAhB;AACAF,UAAMG,MAAN,GAAe,GAAf;AACAJ,SAAKC,KAAL;AACH,CALD;AAMAnB,IAAIS,GAAJ,CAAQ,UAACU,KAAD,EAAQH,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AAC/BD,QAAIK,MAAJ,CAAWH,MAAMG,MAAN,IAAgB,GAA3B;AACA,WAAOL,IAAIL,IAAJ,CAAS;AACZO,eAAO;AACHE,qBAASF,MAAME;AADZ;AADK,KAAT,CAAP;AAKH,CAPD;;AASArB,IAAIuB,MAAJ,CAAWtB,IAAX,EAAiB,YAAM;AACnBuB,YAAQC,GAAR,6BAAsCxB,IAAtC;AACH,CAFD","file":"app.js","sourcesContent":["import express from 'express';\nimport mongoose from 'mongoose';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport fs from 'fs';\nimport path from 'path';\nimport { router } from './config/routes'\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/invoicebuilder');\nconst app = express();\nconst PORT = 3000;\n\nconst accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })\n\napp.use(morgan('combined', { stream: accessLogStream }));\n\napp.use(bodyParser.json());\napp.use(express.urlencoded());\napp.use('/api', router);\napp.use((req, res, next) => {\n    const error = new Error('Not Found!');\n    error.message = 'Invalid Route!'\n    error.status = 404;\n    next(error);\n})\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    return res.json({\n        error: {\n            message: error.message\n        }\n    });\n});\n\napp.listen(PORT, () => {\n    console.log(`server running at port ${PORT}`);\n});"]}